package state

import (
	"strconv"
	"sync"
	"time"

	"github.com/nestybox/sysvisor/sysvisor-fs/domain"
)

//
// Container type to represent all the container-state relevant to sysvisorfs.
//
type container struct {
	sync.RWMutex
	id        string              // container-id value generated by runC
	initPid   uint32              // initPid within container
	hostname  string              // defined container hostname
	ctime     time.Time           // container creation time
	uidFirst  uint32              // first value of Uid range (host side)
	uidSize   uint32              // Uid range size
	gidFirst  uint32              // first value of Gid range (host side)
	gidSize   uint32              // Gid range size
	pidInode  domain.Inode        // inode associated to container's pid-ns
	dataStore domain.StateDataMap // Handler's container-specific storage blob
}

//
// Getters implementations.
//

func (c *container) ID() string {
	c.RLock()
	defer c.RUnlock()

	return c.id
}

func (c *container) InitPid() uint32 {
	c.RLock()
	defer c.RUnlock()

	return c.initPid
}

func (c *container) Hostname() string {
	c.RLock()
	defer c.RUnlock()

	return c.hostname
}

func (c *container) Ctime() time.Time {
	c.RLock()
	defer c.RUnlock()

	return c.ctime
}

func (c *container) PidInode() domain.Inode {
	c.RLock()
	defer c.RUnlock()

	return c.pidInode
}

func (c *container) Data(path string, name string) (string, bool) {
	c.RLock()
	defer c.RUnlock()

	if c.dataStore == nil {
		return "", false
	}

	if _, ok := c.dataStore[path]; !ok {
		return "", false
	}

	return c.dataStore[path][name], true
}

// String() specialization for container type.
func (c *container) String() string {
	c.RLock()
	defer c.RUnlock()

	return "\n\t\t id: " + c.id + "\n" +
		"\t\t initPid: " + strconv.Itoa(int(c.initPid)) + "\n" +
		"\t\t hostname: " + c.hostname + "\n" +
		"\t\t ctime: " + c.ctime.String() + "\n" +
		"\t\t pidNsInode: " + strconv.FormatUint(c.pidInode, 10)
}

//
// Setters implementations.
//

func (c *container) SetCtime(t time.Time) {
	c.Lock()
	defer c.Unlock()

	c.ctime = t
}

func (c *container) SetData(path string, name string, data string) {
	c.Lock()
	defer c.Unlock()

	if c.dataStore == nil {
		c.dataStore = make(domain.StateDataMap)
	}

	if _, ok := c.dataStore[path]; !ok {
		c.dataStore[path] = make(domain.StateData)
	}

	c.dataStore[path][name] = data
}
