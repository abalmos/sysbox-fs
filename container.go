package main

import (
	"strconv"
	"sync"
	"time"
)

//
// File in charge of hosting all the logic dealing with the container-state
// and container-id/inode mappings required by Sysvisorfs for its operation.
//

//
// containerIDInodeMap serves as an auxiliar data-struct during container's
// registration/unregistration phases. It keeps a one-to-one mapping between
// container-IDs (i.e. container-name) and its corresponding pid-ns inode. This
// information is needed during unregistration phase, as by that time, container
// name-spaces are already destroyed, which precludes the identification of
// the inode associated to the pid-namespace.
//
type containerIDInodeMap struct {
	sync.RWMutex // unused at the moment
	internal     map[string]uint64
}

func newContainerIDInodeMap() *containerIDInodeMap {

	ci := &containerIDInodeMap{
		internal: make(map[string]uint64),
	}

	return ci
}

//
// The following get/set/delete/lookup methods *must* be exclusively called
// by container registration/unregistration logic, which runs within the scope
// of grpcServer's goroutine. Any other use-case will require the modification
// of these methods by incorporating concurrency-primitives.
//

func (ci *containerIDInodeMap) get(key string) (uint64, bool) {

	val, ok := ci.internal[key]

	return val, ok
}

func (ci *containerIDInodeMap) set(key string, value uint64) {

	ci.internal[key] = value
}

func (ci *containerIDInodeMap) delete(key string) {

	delete(ci.internal, key)
}

//
// Container type to represent all the container-state relevant to sysvisorfs.
//
type containerState struct {
	sync.RWMutex
	id         string    // container-id value generated by runC
	initPid    uint32    // initPid within container
	hostname   string    // defined container hostname
	ctime      time.Time // container creation time
	uidFirst   uint32    // first value of Uid range (host side)
	uidSize    uint32    // Uid range size
	gidFirst   uint32    // first value of Gid range (host side)
	gidSize    uint32    // Gid range size
	pidNsInode uint64    // inode associated to container's pid-ns
}

// ContainerState constructor.
func newContainerState(
	id string,
	initPid uint32,
	hostname string,
	uidFirst uint32,
	uidSize uint32,
	gidFirst uint32,
	gidSize uint32) (*containerState, error) {

	cntr := &containerState{
		id:         id,
		initPid:    initPid,
		hostname:   hostname,
		ctime:      time.Time{}, // initializing ctime with zeroed-timestamp
		uidFirst:   uidFirst,
		uidSize:    uidSize,
		gidFirst:   gidFirst,
		gidSize:    gidSize,
		pidNsInode: 0,
	}

	return cntr, nil
}

// String() specialization for Container type.
func (c *containerState) String() string {

	return "\n\t\t id: " + c.id + "\n" +
		"\t\t initPid: " + strconv.Itoa(int(c.initPid)) + "\n" +
		"\t\t hostname: " + c.hostname + "\n" +
		"\t\t ctime: " + c.ctime.String() + "\n" +
		"\t\t pidNsInode: " + strconv.FormatUint(c.pidNsInode, 10)
}
