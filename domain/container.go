package domain

import (
	"strconv"
	"sync"
	"time"
)

type ContainerIface interface {
	Create() error
	Update() error
	Delete() error
}

//
// Auxiliar types to deal with the per-container-state associated to all the
// emulated resources.
//
type StateDataMap = map[string]StateData
type StateData = map[string]string

//
// Container type to represent all the container-state relevant to sysvisorfs.
//
type Container struct {
	sync.RWMutex
	ID       string    // container-id value generated by runC
	InitPid  uint32    // initPid within container
	Hostname string    // defined container hostname
	Ctime    time.Time // container creation time
	UIDFirst uint32    // first value of Uid range (host side)
	UIDSize  uint32    // Uid range size
	GIDFirst uint32    // first value of Gid range (host side)
	GIDSize  uint32    // Gid range size
	PidInode Inode     // inode associated to container's pid-ns
	//ContainerStateIface           // state interface for sysvisor-fs emulated resources
	Data StateDataMap
}

// String() specialization for Container type.
func (c *Container) String() string {

	return "\n\t\t id: " + c.ID + "\n" +
		"\t\t initPid: " + strconv.Itoa(int(c.InitPid)) + "\n" +
		"\t\t hostname: " + c.Hostname + "\n" +
		"\t\t ctime: " + c.Ctime.String() + "\n" +
		"\t\t pidNsInode: " + strconv.FormatUint(c.PidInode, 10)
}

//
// CRUD iface + Lookup methods
//
type ContainerDBIface interface {
	Create(id string, pid uint32, h string, i Inode) *Container
	Add(c *Container) error
	Update(c *Container) error
	Delete(c *Container) error
	LookupById(id string) *Container
	LookupByPid(pidInode Inode) *Container
}

type ContainerStateService interface {
	ContainerCreate(id string, pid uint32, h string, i Inode) *Container
	ContainerAdd(c *Container) error
	ContainerUpdate(c *Container) error
	ContainerDelete(c *Container) error
	ContainerLookupById(id string) *Container
	ContainerLookupByPid(pidInode Inode) *Container
}
